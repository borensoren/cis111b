/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package cis111b;

import javax.swing.DefaultComboBoxModel;
import javax.swing.table.DefaultTableModel;
import java.sql.*;
import org.jooq.*;
import org.jooq.impl.*;
import org.jooq.conf.*;
import static generated.Tables.*;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.EventListener;
import java.util.logging.Level;
import java.util.logging.Logger;


/**
 *
 * @author jmclaughlin
 */
public class cis111bRUN extends javax.swing.JFrame implements EventListener{

   /*
    *@param tableSelected User selected table from provided drop down box.
    *@param tableSelected User selected table from provided drop down box.
    *@param tableSelected User selected table from provided drop down box.
    *@param tableSelected User selected table from provided drop down box.
    *@param tableSelected User selected table from provided drop down box.
    *@param tableSelected User selected table from provided drop down box.
    *@param tableSelected User selected table from provided drop down box.
    */ 
    protected String tableSelected;
    protected String columnSelected;
    protected Object[][] data;
    protected String sqlStatement;
    protected String operandSelected;
    protected String whereCondition;
    protected ResultSet rs;
    protected ResultSetMetaData rsmd;
    protected int columnCount;
    protected Statement statement;
    
    
    
    static void init() throws SQLException {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(cis111bRUN.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(cis111bRUN.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(cis111bRUN.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(cis111bRUN.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        
        
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                SQLDialect dialect = SQLDialect.DERBY;

                Settings settings = new Settings();
                settings.setRenderFormatted(true); 
                settings.setRenderNameStyle(RenderNameStyle.LOWER); 
                settings.setRenderKeywordStyle(RenderKeywordStyle.UPPER); 
                settings.setRenderSchema(Boolean.FALSE);
                new cis111bRUN().setVisible(true);
            }
        });
    }
    
    
    
    /**
     * Creates new form cis111bRUN
     */
    public cis111bRUN() {
        try {
            CIS111b.connect();
        } catch (SQLException ex) {
            Logger.getLogger(cis111bRUN.class.getName()).log(Level.SEVERE, null, ex);
        }
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox();
        jButton2 = new javax.swing.JButton();
        jComboBox2 = new javax.swing.JComboBox();
        jComboBox3 = new javax.swing.JComboBox();
        jTextField1 = new javax.swing.JTextField();
        jButton3 = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jTable1);

        jButton1.setText("See the SQL");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "CLASS", "ENROLL", "FACULTY", "STUDENT" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jButton2.setText("Browse your Table");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "" }));
        jComboBox2.addActionListener(jComboBox1.getAction());
        jComboBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox2ActionPerformed(evt);
            }
        });

        jComboBox3.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "" }));
        jComboBox3.addActionListener(jComboBox2.getAction());
        jComboBox3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox3ActionPerformed(evt);
            }
        });

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jButton3.setText("get Results");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane3.setViewportView(jTextArea1);

        jLabel1.setText("You may choose a column to narrow down your results");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jButton2)
                                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 263, Short.MAX_VALUE))))
                        .addGap(50, 50, 50)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton3)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton1))
                        .addGap(345, 345, 345))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jButton3)
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(44, 44, 44)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 599, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>                        

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        try {
            statement = CIS111b.connect().createStatement();
        } catch (SQLException ex) {
            Logger.getLogger(cis111bRUN.class.getName()).log(Level.SEVERE, null, ex);
        }
        jTextArea1.setText(statement.toString());
    }                                        

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {                                            
        whereCondition = jTextField1.getText();
    }                                           

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {                                         
       /*
        tableSelected = (String)jComboBox1.getSelectedItem();
        
        try {
            statement = CIS111b.connect().createStatement();
            rs = statement.executeQuery("SELECT * FROM " + tableSelected);
            rsmd = rs.getMetaData();
            columnCount = rsmd.getColumnCount();
        } catch (SQLException ex) {
            Logger.getLogger(cis111bRUN.class.getName()).log(Level.SEVERE, null, ex);
        }     
        
        ArrayList<String> columns = new ArrayList();
        columns.clear();
        for  (int i = 1; i < columnCount; i++) {
            String name;
            try {
                name = rsmd.getColumnName(i);
                columns.add(name);
            } catch (SQLException ex) {
                Logger.getLogger(cis111bRUN.class.getName()).log(Level.SEVERE, null, ex);
            }
            
        }
        String[] columnNames = new String[columns.size()];
        columnNames = columns.toArray(columnNames);
        jTextField1.setText(columnNames.toString());
        jComboBox2.setModel(new DefaultComboBoxModel(columnNames));
        */
        //tableSelected = (String)jComboBox1.getSelectedItem();
        //tableSelected = (String)jComboBox1.getSelectedItem();
  //jOOQ query, save table data to Object[][] data;
	//jOOQ query, return column names to 
	//jTable1.setModel(new DefaultTableModel(data, columnNames));
    }                                        

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        Statement statement;
        columnSelected = (String)jComboBox2.getSelectedItem();
        try {
            statement = CIS111b.connect().createStatement();
            rs = statement.executeQuery("SELECT * FROM "+tableSelected);
            rsmd = rs.getMetaData();
            int columnCount = rsmd.getColumnCount();
            
            //Create an ArrayList with stored column names
            ArrayList<String> columns = new ArrayList();
            
            for  (int i = 1; i < columnCount; i++) {
                String typeName;
                String columnName;
                try {
                    columnName = rsmd.getColumnName(i);
                    typeName = rsmd.getColumnTypeName(i);
                    //if the column name is equal to columnSelected
                    if(columnSelected.equals(columnName)){
                        //if the data type is equal to a certain data type, populate jComboox3
                        if(typeName.equals("VARCHAR"))
                        jComboBox3.setModel(new DefaultComboBoxModel(new String[] {"begins with","ends with", "equals"}));
                        else if(typeName.equals("INT")){
                            jComboBox3.setModel(new DefaultComboBoxModel(new String[] {"<","<=", "=",">=",">"}));
                        }
                    }
                } catch (SQLException ex) {
                    Logger.getLogger(cis111bRUN.class.getName()).log(Level.SEVERE, null, ex);
                }

            }
           
            //
            for (int i = 1; i < columnCount; i++) {
                
                
            }
            
        } catch (SQLException ex) {
            Logger.getLogger(cis111bRUN.class.getName()).log(Level.SEVERE, null, ex);
        }
    }                                        

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {                                           
        tableSelected = (String)jComboBox1.getSelectedItem();
        
        try {
            rs = CIS111b.getRS(tableSelected);
            rsmd = rs.getMetaData();
            columnCount = rsmd.getColumnCount();
        } catch (SQLException ex) {
            Logger.getLogger(cis111bRUN.class.getName()).log(Level.SEVERE, null, ex);
        }     
        
        ArrayList<String> columns = new ArrayList();
        columns.clear();
        for  (int i = 1; i < columnCount; i++) {
            String name;
            try {
                name = rsmd.getColumnName(i);
                columns.add(name);
            } catch (SQLException ex) {
                Logger.getLogger(cis111bRUN.class.getName()).log(Level.SEVERE, null, ex);
            }
            
        }
        String[] columnNames = new String[columns.size()];
        columnNames = columns.toArray(columnNames);
        jTextField1.setText(columnNames.toString());
        jComboBox2.setModel(new DefaultComboBoxModel(columnNames));
    }                                          

    private void jComboBox3ActionPerformed(java.awt.event.ActionEvent evt) {                                           
        columnSelected = (String)jComboBox2.getSelectedItem();
    }                                          

    private void jComboBox2ActionPerformed(java.awt.event.ActionEvent evt) {                                           
        Statement statement;
        columnSelected = (String)jComboBox2.getSelectedItem();
        try {            
            rs = CIS111b.getRS(tableSelected);
            rsmd = rs.getMetaData();
            int columnCount = rsmd.getColumnCount();
            
            //Create an ArrayList with stored column names
            ArrayList<String> columns = new ArrayList();
            
            for  (int i = 1; i < columnCount; i++) {
                String typeName;
                String columnName;
                try {
                    columnName = rsmd.getColumnName(i);
                    typeName = rsmd.getColumnTypeName(i);
                    //if the column name is equal to columnSelected
                    if(columnSelected.equals(columnName)){
                        //if the data type is equal to a certain data type, populate jComboox3
                        if(typeName.equals("VARCHAR"))
                        jComboBox3.setModel(new DefaultComboBoxModel(new String[] {"begins with","ends with", "equals"}));
                        else if(typeName.equals("INT")){
                            jComboBox3.setModel(new DefaultComboBoxModel(new String[] {"<","<=", "=",">=",">"}));
                        }
                    }
                } catch (SQLException ex) {
                    Logger.getLogger(cis111bRUN.class.getName()).log(Level.SEVERE, null, ex);
                }

            }
           
            //
            for (int i = 1; i < columnCount; i++) {
                
                
            }
            
        } catch (SQLException ex) {
            Logger.getLogger(cis111bRUN.class.getName()).log(Level.SEVERE, null, ex);
        }
    }                                          
    
                                        
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(cis111bRUN.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(cis111bRUN.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(cis111bRUN.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(cis111bRUN.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new cis111bRUN().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify                     
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JComboBox jComboBox2;
    private javax.swing.JComboBox jComboBox3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration                   
}
